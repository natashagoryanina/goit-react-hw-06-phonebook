{"version":3,"sources":["redux/contacts/contactsActions.js","Components/contactsForm/ContactsFormStyled.js","Components/contactsForm/ContactsForm.js","Components/contactsListItem/ContactsListItemStyled.js","Components/contactsListItem/ContactsListItem.js","Components/contactsList/ContactsListStyled.js","Components/contactsList/ContactsList.js","Components/filter/FilterStyled.js","redux/filter/filterActions.js","Components/filter/Filter.js","styles/globalStyles.js","Components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["addContact","createAction","removeContactById","FormContainer","styled","form","initialState","name","number","ContactsForm","useState","contactsForm","setContactsForm","dispatch","useDispatch","onFormChange","e","target","value","prev","onSubmit","contact","preventDefault","id","uuidv4","className","type","onChange","pattern","title","required","ContactsListItemContainer","li","ContactsListItem","onClick","ContactsListContainer","ul","ContactsList","filterValue","useSelector","state","contacts","filter","console","log","items","toLowerCase","includes","length","map","FilterContainer","label","onFilterChange","Filter","GlobalStyles","createGlobalStyle","App","contactsReducer","createReducer","payload","some","item","alert","filterReducer","persistConfig","key","version","storage","rootReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c189da47.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nconst addContact = createAction('contact/addContact');\nconst removeContactById = createAction('contact/removeContactById');\n\nexport {addContact, removeContactById};\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n    display: flex;\n    flex-direction: column;\n\n    .formLabel {\n        margin-bottom: 20px;\n    }\n\n    .formInput {\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        height: 25px;\n    }\n\n    .formText {\n        margin-bottom: 7px;\n        font-size: 18px;\n        line-height: 29px;\n    }\n\n    .addContactBtn {\n        width: 100px;\n    }\n\n`","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsActions';\nimport { FormContainer } from './ContactsFormStyled';\n\nconst initialState = { \n    name: '',\n    number: ''\n};\n\nconst ContactsForm = () => {\n    const [contactsForm, setContactsForm] = useState(initialState);\n\n    const dispatch = useDispatch();\n    const addManualContact = (contact) => dispatch(addContact(contact));\n\n    const onFormChange = (e) => {\n        const {name, value} = e.target;\n        setContactsForm((prev)=>({...prev, [name]: value }));\n    };\n\n    const onFormSubmit = (e) => {\n        const {name, number} = contactsForm;\n        e.preventDefault();\n        addManualContact({name: name, id:uuidv4(), number: number});\n        setContactsForm(initialState);\n    };\n\n    return (\n        <FormContainer onSubmit={onFormSubmit}>\n                <span className=\"formText\">Name:</span>\n                <label className=\"formLabel\">\n                    <input\n                        className=\"formInput\"\n                        type=\"text\"\n                        name=\"name\"\n                        onChange={onFormChange}\n                        value={contactsForm.name}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                    />\n                </label>\n                <span className=\"formText\">Number:</span>\n                <label className=\"formLabel\">\n                    <input\n                        className=\"formInput\"\n                        type=\"tel\"\n                        name=\"number\"\n                        onChange={onFormChange}\n                        value={contactsForm.number}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                        />\n                </label>\n                <button className=\"addContactBtn\" type=\"submit\">\n                    Add contact\n                </button>\n        </FormContainer>\n    );\n};\n\nexport default ContactsForm;\n","import styled from 'styled-components';\n\nconst ContactsListItemContainer = styled.li`\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n    margin-bottom: 15px;\n    font-size: 16px;\n    line-height: 29px;\n\n    .deleteBtn {\n        width: 65px;\n        margin-left: 10px;\n        margin-bottom: 0;\n    }\n`;\n\nexport default ContactsListItemContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport ContactsListItemContainer from './ContactsListItemStyled';\nimport { removeContactById } from '../../redux/contacts/contactsActions';\n\nconst ContactsListItem = ({contact}) => {\n    const dispatch = useDispatch();\n    const removeContact = (id) => dispatch(removeContactById(id));\n    const remove = () => removeContact(contact.id);\n    \n    return (\n        <ContactsListItemContainer>\n            <span>{contact.name}: {contact.number}</span>\n            <button className=\"deleteBtn\" type=\"button\" onClick={remove}>Delete</button>\n        </ContactsListItemContainer>\n    );\n};\n\nContactsListItem.propTypes = {\n    contact: PropTypes.object,\n    removeContactById: PropTypes.func\n};\n\nexport default ContactsListItem;","import styled from 'styled-components';\n\nconst ContactsListContainer = styled.ul`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport default ContactsListContainer;","import React from 'react';\nimport ContactsListItem from '../contactsListItem/ContactsListItem';\nimport PropTypes from 'prop-types';\nimport ContactsListContainer from './ContactsListStyled';\nimport { useSelector } from 'react-redux';\n\nconst ContactsList = () => {\n    const filterValue = useSelector(state => state.contacts.filter);\n    const contacts = useSelector(({contacts}) => {\n     console.log(contacts);\n        return contacts.items.filter(({name}) => name.toLowerCase().includes(filterValue.toLowerCase())\n        )\n    });\n   console.log(contacts);\n\n    return (\n        <ContactsListContainer>\n            {contacts.length  && contacts.map((contact)=> \n                <ContactsListItem contact={contact}/>\n            )}\n        </ContactsListContainer>\n    );\n};\n\nContactsList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    removeContactById: PropTypes.func\n};\n\nexport default ContactsList;\n\n","import styled from 'styled-components';\n\nconst FilterContainer = styled.label`\n    display: flex;\n    flex-direction: column;\n\n    .filterText {\n        margin-bottom: 7px;\n        font-size: 18px;\n        line-height: 29px;\n    }\n\n    .filterInput{\n        height: 25px;\n        width: 151px;\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        margin-bottom: 20px;\n    }\n`;\n\nexport default FilterContainer;","import { createAction } from \"@reduxjs/toolkit\";\n\nconst onFilterChange = createAction('filter/onFilterChange');\n\nexport {onFilterChange};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FilterContainer from './FilterStyled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { onFilterChange } from '../../redux/filter/filterActions';\n\nconst Filter = () => {\n    const value = useSelector(state => state.contacts.filter);\n    const dispatch = useDispatch();\n\n    const onChange = (e) => dispatch(onFilterChange(e));\n    return (\n        <FilterContainer>\n            <span className=\"filterText\">Find contacts by name</span>\n            <input \n                className=\"filterInput\"\n                type=\"text\" \n                name=\"filter\"\n                value={value}\n                onChange={onChange}\n            />\n        </FilterContainer>\n    );\n};\n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nexport default Filter;","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n    body {\n        font-family: \"Amazon Ember\",sans-serif;\n        padding: 25px;\n    }\n\n    ul{\n        list-style: none;\n        padding: 0;\n    }\n\n    button {\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        display: flex;\n        margin-bottom: 20px;\n        font-family: \"Amazon Ember\",sans-serif;\n        font-size: 13px;\n        line-height: 29px;\n        padding: 0 10px 0 11px;\n        position: relative;\n        text-align: center;\n        text-decoration: none;\n        vertical-align: middle;\n    }\n\n    button:hover {\n        background-color: #f7fafa;\n    }\n\n    button:focus {\n        border-color: #008296;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        outline: 0;\n    }\n\n    h1,\n    h2 {\n        margin-top: 0;\n    }\n`;\n\nexport default GlobalStyles;","import React from 'react';\nimport ContactsForm from './contactsForm/ContactsForm';\nimport ContactsList from './contactsList/ContactsList';\nimport Filter from './filter/Filter';\nimport GlobalStyles from '../styles/globalStyles';\n\nconst App = () => {\n    return (\n        <main>\n            <GlobalStyles></GlobalStyles>\n            <h1>Phonebook</h1>\n            <ContactsForm/>\n            <Filter />\n            <h2>Contacts</h2>\n            <ContactsList/>\n        </main>\n    );\n};\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { onFilterChange } from '../filter/filterActions';\nimport { addContact, removeContactById } from \"./contactsActions\";\n\nconst initialState = {\n    contacts: {\n        items: [],\n        filter: ''\n    }\n};\n\nconst contactsReducer = createReducer(initialState.contacts.items, {\n    [addContact]: (state, {payload}) => {\n        const isCopy = state.some((item) => \n               item.name.toLowerCase() === payload.name.toLowerCase()\n            );\n        if(isCopy) {\n            alert(`${payload.name} is already in contacts.`);\n            return;\n        }\n        return [...state, payload];\n    },\n    [removeContactById]: (state, {payload}) => {\n        return state.filter(contact => contact.id !== payload);\n    },\n});\n\nconst filterReducer = createReducer(initialState.contacts.filter, {\n    [onFilterChange]: (state, {payload}) => {\n        const {value} = payload.target;\n        return `${value}`;\n    }\n});\n\nexport {contactsReducer, filterReducer};","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport {contactsReducer, filterReducer} from './contacts/contactsReducer';\nimport {\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n    key: 'root',\n    version: 1,\n    storage,\n};\n\nconst rootReducer = combineReducers({\n    items: contactsReducer,\n    filter: filterReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n    reducer: {\n        contacts: persistedReducer,\n    },\n    middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './Components/App';\nimport store from './redux/store';\nimport { persistStore} from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nlet persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}